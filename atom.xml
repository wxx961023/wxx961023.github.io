<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brazen&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-09T14:16:57.806Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Brazen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue重构有赞商城</title>
    <link href="http://yoursite.com/2019/05/09/Vue%E9%87%8D%E6%9E%84%E6%9C%89%E8%B5%9E%E5%95%86%E5%9F%8E/"/>
    <id>http://yoursite.com/2019/05/09/Vue重构有赞商城/</id>
    <published>2019-05-08T16:21:46.000Z</published>
    <updated>2019-05-09T14:16:57.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、记录我踩到的坑"><a href="#一、记录我踩到的坑" class="headerlink" title="一、记录我踩到的坑"></a>一、记录我踩到的坑</h2><h3 id="（1）、未绑定数据-踩坑次数：2"><a href="#（1）、未绑定数据-踩坑次数：2" class="headerlink" title="（1）、未绑定数据:(踩坑次数：2)"></a>（1）、未绑定数据<code>:</code>(踩坑次数：2)</h3><p><img src="https://upload-images.jianshu.io/upload_images/16648252-b2ea6b80c7e3ff8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/16648252-a185599a6e4fb997.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="（2）、如何实现页面的跳转"><a href="#（2）、如何实现页面的跳转" class="headerlink" title="（2）、如何实现页面的跳转"></a>（2）、如何实现页面的跳转</h3><p>例如：我点击<strong>水果</strong><br><img src="https://upload-images.jianshu.io/upload_images/16648252-e229bad446df6d68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/16648252-ccd6f00a0a052364.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><ol><li>首先绑定<br><img src="https://upload-images.jianshu.io/upload_images/16648252-e79788c67716156c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>2.声明函数，传参数<br><img src="https://upload-images.jianshu.io/upload_images/16648252-b4362bbca856ef8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>3.对象的解构赋值<br><img src="https://upload-images.jianshu.io/upload_images/16648252-8b75aad6e42c2a8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li></ol><h2 id="二、课程的重点部分"><a href="#二、课程的重点部分" class="headerlink" title="二、课程的重点部分"></a>二、课程的重点部分</h2><h3 id="第二课"><a href="#第二课" class="headerlink" title="第二课"></a>第二课</h3><h4 id="（1）、左侧导航栏切换"><a href="#（1）、左侧导航栏切换" class="headerlink" title="（1）、左侧导航栏切换"></a>（1）、左侧导航栏切换</h4><p><img src="https://upload-images.jianshu.io/upload_images/16648252-fe7b9de22ebafbbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><ul><li>采用到<code>class</code>和<code>style</code>的绑定问题</li><li>点击进行切换，就是绑定事件<code>@click=&quot;&quot;</code>绑定原生事件，做一个识别和请求，对后台的数据做请求，做请求就是传<code>id</code>,请求二级分类。把一级分类<code>id</code>传到二级分类，根据<code>id</code>进行相应的请求。（点击一级获取二级）<br><img src="https://upload-images.jianshu.io/upload_images/16648252-75eca4de60a601f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>相对应的需要在JS中把方法<code>getSublist()</code>定义出来<br><img src="https://upload-images.jianshu.io/upload_images/16648252-48d18fe1f436ea36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们在浏览器中看下id是否传过来了<br><img src="https://upload-images.jianshu.io/upload_images/16648252-08b519e9e2153d25.gif?imageMogr2/auto-orient/strip" alt><br>我们可以看到点击4个选择分别传的<code>id</code>为：800、810、817、811</li></ul><hr><p>把数组的下标传进来，进行切换用<code>v-show=&quot;topIndex ===0&quot;</code><br><img src="https://upload-images.jianshu.io/upload_images/16648252-d53bc56c63aa7840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/16648252-2eb0769fb00d7195.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/16648252-d5becee42965a468.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/16648252-14c60540bd068cff.gif?imageMogr2/auto-orient/strip" alt="实现切换功能.gif"></p><h4 id="（2）、左侧导航栏焦点状态的处理，其实就是一个类加载的问题"><a href="#（2）、左侧导航栏焦点状态的处理，其实就是一个类加载的问题" class="headerlink" title="（2）、左侧导航栏焦点状态的处理，其实就是一个类加载的问题"></a>（2）、左侧导航栏焦点状态的处理，其实就是一个类加载的问题</h4><p><img src="https://upload-images.jianshu.io/upload_images/16648252-4b9883436b76a089.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们在这就已经写死了状态为active，我们需要把这里删除，重新绑定<br><img src="https://upload-images.jianshu.io/upload_images/16648252-a1a5774862685073.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/16648252-e30810759c62f7e9.gif?imageMogr2/auto-orient/strip" alt></p><h4 id="（3）、商品价格的处理，用过滤器"><a href="#（3）、商品价格的处理，用过滤器" class="headerlink" title="（3）、商品价格的处理，用过滤器"></a>（3）、商品价格的处理，用过滤器</h4><p><img src="https://upload-images.jianshu.io/upload_images/16648252-46efd7c6373f11c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>html代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;price&quot;&gt;￥&#123;&#123;list.price | numFilter&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>js代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filters:&#123;</span><br><span class="line">    numFilter(price)&#123;</span><br><span class="line">        return price.toFixed(2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/16648252-f544be9919c36619.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意：必须是<strong>Number</strong>类型数据才能使用toFixed() 方法，但是vue中获取的数据通常为String格式，所以这里用Number处理一下数据。</p><hr><h3 id="第三课"><a href="#第三课" class="headerlink" title="第三课"></a>第三课</h3><p>####（1）、现在处于分类页面，下面图标激活状态不对应<br><img src="https://upload-images.jianshu.io/upload_images/16648252-7831a8b45f79315c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="（2）、拓展知识"><a href="#（2）、拓展知识" class="headerlink" title="（2）、拓展知识"></a>（2）、拓展知识</h3><p>（2.1）单Vue文件<br><img src="https://upload-images.jianshu.io/upload_images/16648252-aeaa4c25c9dd75b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><ul><li>对于单Vue文件，关于<code>data</code>的配置必须是一个方法，在方法内部返回一个对象</li><li>你一个单Vue文件可能会在页面上，可能在多处使用同一个单Vue文件,这种情况下，那么多个地方的单Vue文件会共享同一处数据，为了保证每一个组件的数据源的唯一性，就这么处理</li></ul><p>（2.2）引入qs模块<br><img src="https://upload-images.jianshu.io/upload_images/16648252-c716564aed219589.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>加载进来<br><img src="https://upload-images.jianshu.io/upload_images/16648252-08bd6ba40cff8415.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>接下去的内容看开头页面如何跳转</strong></p><hr><h3 id="（3）、如何实现toTOP的小功能，当滑动页面一定距离出现"><a href="#（3）、如何实现toTOP的小功能，当滑动页面一定距离出现" class="headerlink" title="（3）、如何实现toTOP的小功能，当滑动页面一定距离出现"></a>（3）、如何实现toTOP的小功能，当滑动页面一定距离出现</h3><p><img src="https://upload-images.jianshu.io/upload_images/16648252-0741eb256a861610.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><ul><li>绑定最外面的容器标签，绑定的时间是<code>@touchmove=&quot;move&quot;</code><br><img src="https://upload-images.jianshu.io/upload_images/16648252-a90401b6c68f1fc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li><li>声明函数作用<br><img src="https://upload-images.jianshu.io/upload_images/16648252-16456ab2c822ba66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这里不要写<code>document.body.scrollTop</code></li><li>绑定内容，用<code>v-show</code>，添加事件<code>@toTop</code><br><img src="https://upload-images.jianshu.io/upload_images/16648252-f066ad6541321c42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、记录我踩到的坑&quot;&gt;&lt;a href=&quot;#一、记录我踩到的坑&quot; class=&quot;headerlink&quot; title=&quot;一、记录我踩到的坑&quot;&gt;&lt;/a&gt;一、记录我踩到的坑&lt;/h2&gt;&lt;h3 id=&quot;（1）、未绑定数据-踩坑次数：2&quot;&gt;&lt;a href=&quot;#（1）、未绑定数据
      
    
    </summary>
    
    
      <category term="demo" scheme="http://yoursite.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>09-阐述内容、样式和行为分离</title>
    <link href="http://yoursite.com/2019/04/15/09-%E9%98%90%E8%BF%B0%E5%86%85%E5%AE%B9%E3%80%81%E6%A0%B7%E5%BC%8F%E5%92%8C%E8%A1%8C%E4%B8%BA%E5%88%86%E7%A6%BB/"/>
    <id>http://yoursite.com/2019/04/15/09-阐述内容、样式和行为分离/</id>
    <published>2019-04-15T12:47:25.000Z</published>
    <updated>2019-04-15T12:48:43.158Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是面试时候可能遇到的一道题</p></blockquote><hr><h1 id="一、先说观点"><a href="#一、先说观点" class="headerlink" title="一、先说观点"></a>一、先说观点</h1><ul><li>我认为内容、样式和行为分离，根据W3C标准来说，就是<code>html</code>负责内容，<code>CSS</code>负责样式，<code>JS</code>负责行为。</li></ul><h1 id="二、提供论据"><a href="#二、提供论据" class="headerlink" title="二、提供论据"></a>二、提供论据</h1><ul><li>类似这样的题目，如果正面不好回答的情况下，可以尝试反着回答，如人为什么要吃饭，答：如果人不吃饭就会饿死！</li></ul><hr><ol><li>假设<code>html</code>控制样式，如图<br><img src="https://upload-images.jianshu.io/upload_images/16648252-becae76640b37ef4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="html控制样式"></li></ol><ul><li>用<code>&lt;center&gt;</code>标签把文字居中，然后用<code>&lt;strong&gt;</code>加粗文字。</li><li>这样的写法把原本简单的逻辑结构变得复杂话，不利于代码的维护。</li><li>如果html也负责样式的话，使得内容的结构有很多无用的标签，有的标签表示内容，有的标签表示样式，这样我就很难区分内容的逻辑结构</li></ul><ol start="2"><li>假设用<code>CSS</code>写内容<br><img src="https://upload-images.jianshu.io/upload_images/16648252-98a7a7408ec3878a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CSS写内容"></li></ol><ul><li>这样写会导致用户选取不到文字</li><li>而且JS取不到这里的文本内容</li><li>假如用CSS控制行为，那么CSS里面有很复杂的逻辑，会导致CSS很慢，最终影响页面加载速度</li></ul><ol start="3"><li>假设用JS控制样式</li></ol><ul><li>还没写<code>$div.hiden()</code>之前<br><img src="https://upload-images.jianshu.io/upload_images/16648252-a3f26447ef0a8b00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li><li>写了<code>$div.hiden()</code>之后，文字就被隐藏<br><img src="https://upload-images.jianshu.io/upload_images/16648252-ec35c2930e5755b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li><li>加上<code>$div.show()</code>文字又出现<br><img src="https://upload-images.jianshu.io/upload_images/16648252-6cc2baa7d18b112c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>那么问题来了</li><li>在<code>$div.show()</code>之后，<code>div</code>的属性为<code>display: block;</code>，那么有可能在<code>$div.hiden()</code>之前,原本的<code>div</code>标签属性是<code>display: flex;</code>，经过<code>$div.show()</code>改变了属性的值为<code>block</code>，那么页面的flex布局就会<strong>全局炸掉</strong>。</li></ul><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><hr><ul><li>为了以后改版时更方便，直接修改样式，而不动HTML的内容。更方便易于阅读样式和内容，便于项目的维护。</li><li>网页的内容直接暴露在搜索引擎面前，这样有利于搜索引擎抓取网页的内容。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是面试时候可能遇到的一道题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一、先说观点&quot;&gt;&lt;a href=&quot;#一、先说观点&quot; class=&quot;headerlink&quot; title=&quot;一、先说观点&quot;&gt;&lt;/a&gt;一、先说观点&lt;/h1&gt;&lt;ul
      
    
    </summary>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>08-模拟jQuery实现两个需求</title>
    <link href="http://yoursite.com/2019/04/14/08-%E6%A8%A1%E6%8B%9FjQuery%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E9%9C%80%E6%B1%82/"/>
    <id>http://yoursite.com/2019/04/14/08-模拟jQuery实现两个需求/</id>
    <published>2019-04-14T05:56:12.000Z</published>
    <updated>2019-04-15T07:59:34.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、需求如下"><a href="#一、需求如下" class="headerlink" title="一、需求如下"></a>一、需求如下</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery = ???</span><br><span class="line">window.$ = jQuery</span><br><span class="line"></span><br><span class="line">var $div = $(&apos;div&apos;)</span><br><span class="line">$div.addClass(&apos;red&apos;) // 可将所有 div 的 class 添加一个 red</span><br><span class="line">$div.setText(&apos;hi&apos;) // 可将所有 div 的 textContent 变为 hi</span><br></pre></td></tr></table></figure><p>题目中要求将所有 div 的 class 添加一个 red，以及将所有 div 的 textContent 变为 hi。</p><h2 id="二、解决思路"><a href="#二、解决思路" class="headerlink" title="二、解决思路"></a>二、解决思路</h2><hr><ul><li>jQuery本质就是一个<strong>构造函数</strong>然后接受一个<strong>参数（这个参数可能是节点）</strong>并返回一个<strong>nodes对象</strong>。</li><li><p>首先我们要能用var \$div = $(‘div’)获取到所有 div 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery = function (nodeOrSelector)&#123;</span><br><span class="line">  var nodes = &#123;&#125;</span><br><span class="line">  if(typeof nodeOrSelector === &apos;string&apos;)&#123;</span><br><span class="line">  var temp = document.querySelectorAll(nodeOrSelector)</span><br><span class="line">  for(let i = 0; i &lt; temp.length; i++)&#123;</span><br><span class="line">    nodes[i] = temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">    nodes.length = temp.length</span><br><span class="line">  &#125;else if(nodeOrSelector instanceof Node)&#123;</span><br><span class="line">      nodes = &#123;o: nodeOrSelector,length: 1&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  return nodes</span><br><span class="line">  &#125;</span><br><span class="line">window.$ = jQuery</span><br></pre></td></tr></table></figure></li><li><p>此时，<code>var $div = $(&#39;div&#39;)</code>中的<code>$div</code> 就是上述代码中的 <code>nodes</code>，是一个 value 为所有 div 的<strong>伪数组</strong>。而且，nodes 需要 return 出去，才能被外面的代码调用。<br><code>$div.addClass(&#39;red&#39;)</code>可将所有 div 的 class 添加一个 red，<code>$div.setText(&#39;hi&#39;)</code>可将所有 div 的 textContent 变为 hi，我们给 nodes 添加两个 hash ，即，名为 addClass 和 setText 的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nodes.addClass = function()&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">nodes.setText = function()&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery = function (nodeOrSelector)&#123;</span><br><span class="line">  var nodes = &#123;&#125;</span><br><span class="line">  if(typeof nodeOrSelector === &apos;string&apos;)&#123;</span><br><span class="line">  var temp = document.querySelectorAll(nodeOrSelector)</span><br><span class="line">  for(let i = 0; i &lt; temp.length; i++)&#123;</span><br><span class="line">    nodes[i] = temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">    nodes.length = temp.length</span><br><span class="line">  &#125;else if(nodeOrSelector instanceof Node)&#123;</span><br><span class="line">      nodes = &#123;o: nodeOrSelector,length: 1&#125;;</span><br><span class="line">   &#125;</span><br><span class="line">  nodes.addClass = function(classes)&#123;</span><br><span class="line">    for(let i = 0; i &lt; nodes.length; i++)&#123;</span><br><span class="line">      nodes[i].classList.add(classes)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  nodes.setText = function(text)&#123;</span><br><span class="line">    for(let i = 0; i &lt; nodes.length; i++)&#123;</span><br><span class="line">    nodes[i].textContent  = text</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return nodes</span><br><span class="line">&#125;</span><br><span class="line">window.$ = jQuery</span><br><span class="line">var $div = $(&apos;div&apos;)</span><br><span class="line">$div.addClass(&apos;red&apos;) </span><br><span class="line">$div.setText(&apos;hi&apos;)</span><br></pre></td></tr></table></figure><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><hr><ul><li>在我看来jQuery就是将一个DOM对象重新包装成jQuery对象，这个jQuery对象中包含了许多DOM中不能轻松实现的方法（函数），可以省去很多复杂的代码。</li><li>jQuery的基本设计思想和主要用法，就是”选择某个网页元素，然后对其进行某种操作”。</li><li>使用jQuery的第一步，往往就是将一个选择表达式，放进构造函数jQuery()（简写为$），然后得到被选中的元素。</li><li>首先，声明一个全局函数jQuery，函数通过传参数，通过判断参数的类型及参数是否为节点元素来获取对应的nodes，函数里写有addClass方法和setText方法。</li><li>.addClass方法通过传参数（样式的className），遍历所有nodes并加上提供的class类</li><li>.setText方法，把文本内容当作参数传递到函数中，遍历所有的nodes并通过textContent属性改变标签的文本内容</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、需求如下&quot;&gt;&lt;a href=&quot;#一、需求如下&quot; class=&quot;headerlink&quot; title=&quot;一、需求如下&quot;&gt;&lt;/a&gt;一、需求如下&lt;/h2&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>07-JS初试封装函数</title>
    <link href="http://yoursite.com/2019/04/13/07-JS%E5%88%9D%E8%AF%95%E5%B0%81%E8%A3%85%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/04/13/07-JS初试封装函数/</id>
    <published>2019-04-13T15:43:52.000Z</published>
    <updated>2019-04-13T15:44:45.484Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/16648252-7baf575499fc02d6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="一、封装两个函数"><a href="#一、封装两个函数" class="headerlink" title="一、封装两个函数"></a>一、封装两个函数</h2><hr><p>相关内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li id = &quot;item1&quot;&gt;选项1&lt;/li&gt;</span><br><span class="line">  &lt;li id = &quot;item2&quot;&gt;选项2&lt;/li&gt;</span><br><span class="line">  &lt;li id = &quot;item3&quot;&gt;选项3&lt;/li&gt;</span><br><span class="line">  &lt;li id = &quot;item4&quot;&gt;选项4&lt;/li&gt;</span><br><span class="line">  &lt;li id = &quot;item5&quot;&gt;选项5&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><h3 id="1-需求：获取到一个节点的兄弟姐妹，并放到一个伪数组里。"><a href="#1-需求：获取到一个节点的兄弟姐妹，并放到一个伪数组里。" class="headerlink" title="1. 需求：获取到一个节点的兄弟姐妹，并放到一个伪数组里。"></a>1. 需求：获取到一个节点的兄弟姐妹，并放到一个伪数组里。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.body.nextElementSibling</span><br><span class="line">//获取节点的弟弟</span><br><span class="line">document.body.previousElementSibling</span><br><span class="line">//获取节点的哥哥</span><br></pre></td></tr></table></figure><p>初步思路：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var allChildren = item3.parentNode.chiledren //获取节点的所有兄弟姐妹</span><br><span class="line">var array = &#123;length:0&#125; //创建一个空对象</span><br><span class="line">for(let i = 0; i &lt; alllChildren.length; i++)&#123; //遍历</span><br><span class="line">  if(allChildren[i] !== item3)&#123;</span><br><span class="line">    array[array.length] = allChildren[i]</span><br><span class="line">    array.length += 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(array) //&#123;0:li#itme1, 1:li#itme2, 2:li#itme4, 3:li#itme5, length: 4&#125;</span><br></pre></td></tr></table></figure></p><ul><li>为什么<code>array[array.length]</code>中用<code>array.length</code>不用<code>i</code>，因为它中间有可能跳过一个，跳过之后序号就不一致</li><li>为什么不用push？因为这是一个伪数组（伪数组就是哈希）。</li></ul><p>封装函数：<code>function 起个好用又好听的名字(){}</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function getSiblings(node)&#123; //外部输入一个节点 API</span><br><span class="line">  var allChildren = node.parentNode.chiledren //获取节点的所有兄弟姐妹</span><br><span class="line">  var array = &#123;length:0&#125; //创建一个空对象</span><br><span class="line">  for(let i = 0; i &lt; alllChildren.length; i++)&#123; //遍历</span><br><span class="line">    if(allChildren[i] !== node)&#123;</span><br><span class="line">      array[array.length] = allChildren[i]</span><br><span class="line">      array.length += 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">retuen array</span><br><span class="line">&#125;</span><br><span class="line">console.log(getSiblings(item3))  //&#123;0:li#itme1, 1:li#itme2, 2:li#itme4, 3:li#itme5, length: 4&#125;</span><br><span class="line">```  </span><br><span class="line">### 2. 需求：给节点添加`class`，既能`add`也能`remove`。</span><br><span class="line">初步思路：</span><br></pre></td></tr></table></figure></p><p>item3.classList.add(‘a’)<br>item3.classList.add(‘b’)<br>item3.classList.add(‘c’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">var classes = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br><span class="line">classes.forEach((value) =&gt; item3.classList.add(value))</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var classes = &#123;&apos;a&apos;:ture, &apos;b&apos;:false, &apos;c&apos;:ture&#125;</span><br><span class="line">var value = classes[key]</span><br><span class="line">for(let key in classes)&#123;</span><br><span class="line">  if(value)&#123;</span><br><span class="line">    item3.classList.add(key)</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    item3.classList.remove(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function addClass(node,classes)&#123; //classes有使用者提供</span><br><span class="line">  var value = classes[key]</span><br><span class="line">  for(let key in classes)&#123;</span><br><span class="line">    if(value)&#123;</span><br><span class="line">      node.classList.add(key)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      node.classList.remove(key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">用法： addClass（item3, &#123;&apos;a&apos;:ture, &apos;b&apos;:false, &apos;c&apos;:ture&#125;）</span><br></pre></td></tr></table></figure></p><p>优化代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function addClass(node,classes)&#123;</span><br><span class="line">  var value = classes[key]</span><br><span class="line">  for(let key in classes)&#123;</span><br><span class="line">    var methodName = value ? &apos;add&apos;:&apos;remove&apos;</span><br><span class="line">    node.Classlist[methodName](key)</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>优化守则：</p><ul><li>如果出现类似的代码，就存在优化的可能。</li></ul><h3 id="3-需求：有什么办法让别人知道这两个API有关联性，因为这两个API都是在操作节点"><a href="#3-需求：有什么办法让别人知道这两个API有关联性，因为这两个API都是在操作节点" class="headerlink" title="3. 需求：有什么办法让别人知道这两个API有关联性，因为这两个API都是在操作节点"></a>3. 需求：有什么办法让别人知道这两个API有关联性，因为这两个API都是在操作节点</h3><p>命名空间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window.ffdom = &#123;&#125;</span><br><span class="line">ffdom.getSibilings = getSiblings</span><br><span class="line">ffdom.addClass = addClass</span><br><span class="line"></span><br><span class="line">ffdom.getSibilings(item3)</span><br><span class="line">ffdom.addClass（item3, &#123;&apos;a&apos;:ture, &apos;b&apos;:false, &apos;c&apos;:ture&#125;）</span><br></pre></td></tr></table></figure></p><p>不命名空间的缺点：</p><ul><li>别人不知道你的库叫什么</li><li>不知不觉把全局变量覆盖</li></ul><h3 id="4-需求：我想写成item-getSibilings"><a href="#4-需求：我想写成item-getSibilings" class="headerlink" title="4. 需求：我想写成item.getSibilings"></a>4. 需求：我想写成<code>item.getSibilings</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Node.prototype.getSibilings = function()&#123;</span><br><span class="line">  var allChildren = this.parentNode.chiledren </span><br><span class="line">  var array = &#123;length:0&#125; </span><br><span class="line">  for(let i = 0; i &lt; alllChildren.length; i++)&#123;</span><br><span class="line">    if(allChildren[i] !== this)&#123;</span><br><span class="line">      array[array.length] = allChildren[i]</span><br><span class="line">      array.length += 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  retuen array</span><br><span class="line">&#125;</span><br><span class="line">Node.prototype.addClass = function(classes)&#123;</span><br><span class="line">  var value = classes[key]</span><br><span class="line">  for(let key in classes)&#123;</span><br><span class="line">    var methodName = value ? &apos;add&apos;:&apos;remove&apos;</span><br><span class="line">    this.Classlist[methodName](key)</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">console.log(item3.getSiblings（）) //&#123;0:li#itme1, 1:li#itme2, 2:li#itme4, 3:li#itme5, length: 4&#125;</span><br></pre></td></tr></table></figure><ul><li>因为我们篡改了所有Node的公有属性，添加了一个getSiblings的方法。</li><li><code>this</code>就是<code>.</code>前面的东西（这里就是item3）</li><li><p>调用call </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">item3.getSiblings.call（item3）</span><br></pre></td></tr></table></figure></li><li><p>我自己写一个更好的Node2版本，用新的版本去调用第一个版本</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/16648252-7baf575499fc02d6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS的数据类型</title>
    <link href="http://yoursite.com/2019/04/06/JS%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/04/06/JS的数据类型/</id>
    <published>2019-04-06T14:23:31.000Z</published>
    <updated>2019-04-12T10:32:41.432Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript数据类型概述"><a href="#JavaScript数据类型概述" class="headerlink" title="JavaScript数据类型概述"></a>JavaScript数据类型概述</h3><ul><li><h5 id="在JS中一共有六种数据类型"><a href="#在JS中一共有六种数据类型" class="headerlink" title="在JS中一共有六种数据类型"></a>在JS中一共有六种数据类型</h5><ul><li>String 字符串(基本数据类型)</li><li>Number 数值(基本数据类型)</li><li>Boolean 布尔值(基本数据类型)</li><li>Null 空值(基本数据类型)</li><li>Symbol 符号(基本数据类型)</li><li>Undefined 未定义(基本数据类型)</li><li>Object 对象(引用数据类型)</li></ul></li></ul><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>String用于表示一个字符序列，即字符串</li><li><p>字符串需要使用 ’或“ 括起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str1 = &quot;hello&quot;;</span><br><span class="line">var str2 = `gz`;</span><br><span class="line">var str5 = `hello gz&quot;; // false</span><br><span class="line">console.log(typeof str1 ); // string</span><br><span class="line">console.log(typeof str2); // string</span><br></pre></td></tr></table></figure></li><li><p>相同引号不能嵌套，不同引号可以嵌套</p><ul><li>双引号不能放双引号，单引号不能放单引号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str3 = &quot;hello &quot;gz&quot;&quot;; //  false</span><br><span class="line">var str4 = `hello `gz``; //  false</span><br><span class="line">var str5 = &quot;hello &apos;gz&apos;&quot;; // true</span><br><span class="line">var str6 = `hello &quot;gz&quot;`;// true</span><br></pre></td></tr></table></figure></li></ul></li><li><p>给变量加上引号, 那么变量将变为一个常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var num = 110;</span><br><span class="line">console.log(num); // 输出变量中的值</span><br><span class="line">console.log(&quot;num&quot;); // 输出常量num</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h3><ul><li><p>在JS中所有的数值都是Number类型(整数和小数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var num1= 123;</span><br><span class="line">var num2= 3.14;</span><br><span class="line">console.log(typeof num1); // number</span><br><span class="line">console.log(typeof num2); // number</span><br></pre></td></tr></table></figure></li><li><p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值</p><ul><li>最大值：Number.MAX_VALUE<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number.MAX_VALUE);  // 1.7976931348623157e+308</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最小值：Number.MIN_VALUE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number.MIN_VALUE);  // 5e-324</span><br></pre></td></tr></table></figure></li><li><p>无穷大：Infinity, 如果超过了最大值就会返回该值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number.MAX_VALUE + Number.MAX_VALUE); // Infinity</span><br></pre></td></tr></table></figure><p>无穷小：-Infinity, 如果超过了最小值就会返回该值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof Infinity); // number</span><br><span class="line">console.log(typeof -Infinity); // number</span><br></pre></td></tr></table></figure></li><li><p>NaN 非法数字（Not A Number）,JS中当对数值进行计算时没有结果返回，则返回NaN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num3 = NaN;</span><br><span class="line">console.log(typeof num3); // number</span><br></pre></td></tr></table></figure></li><li><p>Number类型注意点</p><ul><li>JS中整数的运算可以保证精确的结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var sum1 = 10 + 20;</span><br><span class="line">console.log(sum1); // 30</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在JS中浮点数的运算可能得到一个不精确的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var sum1 = 10.1 + 21.1;</span><br><span class="line">console.log(sum1); // 31.200000000000003</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Boolean-布尔值"><a href="#Boolean-布尔值" class="headerlink" title="Boolean 布尔值"></a>Boolean 布尔值</h3><ul><li>布尔型也被称为逻辑值类型或者真假值类型</li><li><p>布尔型只能够取真（true）和假（false）两种数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var bool1 = true;</span><br><span class="line">var bool2 = false;</span><br><span class="line">console.log(typeof bool1); // boolean</span><br><span class="line">console.log(typeof bool2); // boolean</span><br></pre></td></tr></table></figure></li><li><p>虽然Boolean 类型的字面值只有两个，但 ECMAScript 中所有类型的值都有与这两个 Boolean 值等价的值</p><ul><li>任何非零数值都是true, 包括正负无穷大, 只有0和NaN是false</li><li>任何非空字符串都是true, 只有空字符串是false</li><li>任何对象都是true, 只有null和undefined是false<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var bool3 = Boolean(0);</span><br><span class="line">console.log(bool3); // false</span><br><span class="line">var bool4 = Boolean(1);</span><br><span class="line">console.log(bool4); // true</span><br><span class="line">var bool5 = Boolean(-1);</span><br><span class="line">console.log(bool4); // true</span><br><span class="line">var bool6 = Boolean(Infinity);</span><br><span class="line">console.log(bool4); // true</span><br><span class="line">var bool7 = Boolean(-Infinity);</span><br><span class="line">console.log(bool4); // true</span><br><span class="line">var bool8 = Boolean(NaN);</span><br><span class="line">console.log(bool8); // false</span><br><span class="line">var bool9 = Boolean(undefined);</span><br><span class="line">console.log(bool8); // false</span><br><span class="line">var bool10 = Boolean(null);</span><br><span class="line">console.log(bool8); // false</span><br><span class="line">var bool11 = Boolean(&quot;&quot;);</span><br><span class="line">console.log(bool8); // false</span><br><span class="line">var bool12 = Boolean(&quot;abc&quot;);</span><br><span class="line">console.log(bool12); // true</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="Null和Undefined"><a href="#Null和Undefined" class="headerlink" title="Null和Undefined"></a>Null和Undefined</h3><ul><li><p>Undefined这是一种比较特殊的类型，表示变量未赋值，这种类型只有一种值就是undefined</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num;</span><br><span class="line">console.log(num);  //结果是undefined</span><br></pre></td></tr></table></figure></li><li><p>undefined是Undefined类型的字面量</p><ul><li>前者undefined和10, “abc”一样是一个常量</li><li>后者Undefined和Number,Boolean一样是一个数据类型</li><li>需要注意的是typeof对没有初始化和没有声明的变量都会返回undefined。<br><code>`</code><br>var value1 = undefined;<br>console.log(typeof value); //结果是undefined</li></ul></li></ul><p>var value2;<br>console.log(typeof  value2); //结果是undefined</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JavaScript数据类型概述&quot;&gt;&lt;a href=&quot;#JavaScript数据类型概述&quot; class=&quot;headerlink&quot; title=&quot;JavaScript数据类型概述&quot;&gt;&lt;/a&gt;JavaScript数据类型概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h5 id=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开博大吉</title>
    <link href="http://yoursite.com/2019/04/06/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/"/>
    <id>http://yoursite.com/2019/04/06/开博大吉/</id>
    <published>2019-04-06T05:39:42.000Z</published>
    <updated>2019-04-06T05:40:13.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈哈哈哈"><a href="#哈哈哈哈" class="headerlink" title="哈哈哈哈"></a>哈哈哈哈</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;哈哈哈哈&quot;&gt;&lt;a href=&quot;#哈哈哈哈&quot; class=&quot;headerlink&quot; title=&quot;哈哈哈哈&quot;&gt;&lt;/a&gt;哈哈哈哈&lt;/h1&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/04/06/hello-world/"/>
    <id>http://yoursite.com/2019/04/06/hello-world/</id>
    <published>2019-04-06T05:37:24.232Z</published>
    <updated>2019-04-06T05:37:24.233Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
